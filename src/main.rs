mod keyderivation;
mod mac;
mod encryption;
mod serializer;
mod ciphers;
use keyderivation::argon2;
use std::io::Read;
fn main() {
    println!("G");
    let mut file = std::fs::File::open("test.txt").unwrap();
    let mut filebytes = vec![];
    file.read_to_end(&mut filebytes);
    let mut password = b"password1".to_vec();
    let key = keyderivation::argon2::password_to_rk(password, base64::encode("GoodSalt").as_bytes().to_vec());
    let key = key.as_bytes().to_vec();
    let (headerkey, headermackey, messagekey, messagemackey) = keyderivation::hkdf::rk_to_mk_hk(key.clone());
    let mut msg = encryption::aes::cbc::cbc_encrypt(filebytes.clone(), messagekey, vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
    let mut mac = mac::hmac::perform_hmac_sha256(messagemackey, msg.clone());
    let mut serialized = serializer::serialize_hmac_cbc(msg, vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], mac, headerkey, headermackey, vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
    let serialized = ciphers::aes_256_cbc_hmac_sha256_encrypt(key, filebytes); 
    std::fs::write("test.txt.exo", serialized);
    let mut file = std::fs::File::open("test.txt.exo").unwrap();
    let mut filebytes = vec![];
    file.read_to_end(&mut filebytes);
    let mut password = b"password1".to_vec();
    let key = keyderivation::argon2::password_to_rk(password, base64::encode("GoodSalt").as_bytes().to_vec());
    let key = key.as_bytes().to_vec();
    let (headerkey, headermackey, messagekey, messagemackey) = keyderivation::hkdf::rk_to_mk_hk(key);
    let deserialized = serializer::deserialize(filebytes, messagekey, messagemackey, headerkey, headermackey).unwrap();
    std::fs::write("decrypted.txt", deserialized);
    //println!("{:?}", serializer::deserialize(filebytes, messagekey, messagemackey, headerkey, headermackey));
}